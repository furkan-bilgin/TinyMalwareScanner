using System.Diagnostics;

namespace TinyMalwareScanner
{
    public class MalwareScanner
    {
        private static readonly string QUARANTINE_EXTENSION = ".quarantine";
        private static readonly TimeSpan QUARANTINE_TIMEOUT = TimeSpan.FromSeconds(15);

        private MalwareHashChecker malwareHashChecker = new();
        private ProcessMonitor processMonitor = new();
        private HashDatabase hashDatabase = new();

        private System.Threading.Timer? saveDatabaseTimer;
        private System.Threading.Timer? checkRunningProcessesTimer;

        private readonly MainForm mainForm;

        public MalwareScanner(MainForm mainForm)
        {
            this.mainForm = mainForm;
            Initialize();
        }

        private async void Initialize()
        {
            await hashDatabase.LoadDatabase();

            processMonitor.ProcessStartEvent += ProcessMonitor_ProcessStart;
            processMonitor.StartMonitoring();

            saveDatabaseTimer = new System.Threading.Timer(e => _ = hashDatabase.SaveDatabase(), null, TimeSpan.Zero, TimeSpan.FromMinutes(1));
            checkRunningProcessesTimer = new System.Threading.Timer(e => CheckRunningProcesses(), null, TimeSpan.Zero, TimeSpan.FromMinutes(30));
        }

        private void CheckRunningProcesses()
        {
            var processes = Process.GetProcesses();

            foreach (var process in processes)
            {
                foreach (var path in processMonitor.GetAllPathsOfProcess(process))
                {
                    try
                    {
                        ScanProcess(path, process);
                    }
                    catch { }
                }
            }
        }

        private void ProcessMonitor_ProcessStart(string path, Process process)
        {
            ScanProcess(path, process);
        }

        private async void ScanProcess(string path, Process process)
        {
            try
            {
                var fileMd5 = hashDatabase.GetHash(path) ?? MD5.CalculateMD5(path);
                if (fileMd5 == MD5.EMPTY_FILE_HASH)
                {
                    return;
                }

                var avHit = hashDatabase.GetAvHash(fileMd5) ?? await malwareHashChecker.Check(fileMd5);
                if (avHit > 0)
                {
                    _ = Task.Run(() => QuarantineProcess(path, process));
                    _ = Task.Run(() => mainForm.ShowNotification("Malware Detected", $"A malware with {avHit} AV Hit has been detected at path '{path}'"));
                }

                hashDatabase.SetHash(path, fileMd5);
                hashDatabase.SetAvHash(fileMd5, avHit);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex);
            }
        }

        private HashSet<string> quarantineProcessSet = new();
        private void QuarantineProcess(string originalPath, Process process)
        {
            lock (quarantineProcessSet)
            {
                if (quarantineProcessSet.Contains(originalPath))
                {
                    return;
                }

                quarantineProcessSet.Add(originalPath);
            }

            var quarantineStartDate = DateTime.Now;
            var newPath = originalPath + QUARANTINE_EXTENSION;
            var originalFileHash = MD5.CalculateMD5(originalPath);

            while (File.Exists(originalPath))
            {
                if (DateTime.Now - quarantineStartDate > QUARANTINE_TIMEOUT)
                {
                    break;
                }

                try
                {
                    process.Kill();

                    try
                    {
                        foreach (var item in Process.GetProcessesByName(process.ProcessName))
                        {
                            try
                            {
                                if (item.MainModule == null || item.MainModule.FileName == null)
                                {
                                    continue;
                                }

                                if (MD5.CalculateMD5(item.MainModule.FileName) == originalFileHash)
                                {
                                    item.Kill();
                                }
                            }
                            catch { }
                        }
                    }
                    catch { }

                    try
                    {
                        foreach (var item in FileUtil.WhoIsLocking(originalPath))
                        {
                            item.Kill();
                        }
                    }
                    catch { }

                    if (!originalPath.EndsWith(QUARANTINE_EXTENSION))
                    {
                        File.Move(originalPath, newPath);
                    }
                }
                catch (Exception ex)
                {
                    Debug.WriteLine(ex.ToString());
                }
            }

            if (!originalPath.EndsWith(QUARANTINE_EXTENSION))
            {
                Process.Start("explorer.exe", $"/select, \"{newPath}\"");
            }

            lock (quarantineProcessSet)
            {
                quarantineProcessSet.Remove(originalPath);
            }
        }

        public async Task PrepareExit()
        {
            await hashDatabase.SaveDatabase();
        }
    }
}
