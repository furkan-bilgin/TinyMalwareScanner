using System.Diagnostics;

namespace TinyMalwareScanner
{
    public class MalwareScanner
    {
        const string QUARANTINE_EXTENSION = ".quarantine";

        private MalwareHashChecker malwareHashChecker = new();
        private ProcessMonitor processMonitor = new();
        private HashDatabase hashDatabase = new();

        private System.Threading.Timer? saveDatabaseTimer;
        private System.Threading.Timer? checkRunningProcessesTimer;

        public MalwareScanner()
        {
            Initialize();
        }

        private async void Initialize()
        {
            await hashDatabase.LoadDatabase();

            processMonitor.ProcessStartEvent += ProcessMonitor_ProcessStart;
            processMonitor.StartMonitoring();

            saveDatabaseTimer = new System.Threading.Timer(e => _ = hashDatabase.SaveDatabase(), null, TimeSpan.Zero, TimeSpan.FromMinutes(1));
            checkRunningProcessesTimer = new System.Threading.Timer(e => CheckRunningProcesses(), null, TimeSpan.Zero, TimeSpan.FromHours(1));
        }

        private void CheckRunningProcesses()
        {
            var processes = Process.GetProcesses();

            Parallel.ForEach(processes, process =>
            {
                foreach (var path in processMonitor.GetAllPathsOfProcess(process))
                {
                    try
                    {
                        ScanProcess(path, process);
                    }
                    catch { }
                }
            });
        }

        private void ProcessMonitor_ProcessStart(string path, Process process)
        {
            ScanProcess(path, process);
        }

        private async void ScanProcess(string path, Process process)
        {
            try
            {
                var fileMd5 = hashDatabase.GetHash(path) ?? MD5.CalculateMD5(path);
                var avHit = hashDatabase.GetAvHash(fileMd5) ?? await malwareHashChecker.Check(fileMd5);

                if (avHit > 0)
                {
                    _ = Task.Run(() => VirusAction(path, process));

                    Process.Start("explorer.exe", $"/select, \"{path + QUARANTINE_EXTENSION}\"");
                    MessageBox.Show($"A virus has been detected at path '{path}' with AV Hit Score {avHit}.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Error, MessageBoxDefaultButton.Button1, MessageBoxOptions.DefaultDesktopOnly);
                }

                hashDatabase.SetHash(path, fileMd5);
                hashDatabase.SetAvHash(fileMd5, avHit);
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex);
            }
        }

        private void VirusAction(string path, Process process)
        {
            while (File.Exists(path))
            {
                try
                {
                    process.Kill();

                    try
                    {
                        foreach (var item in FileUtil.WhoIsLocking(path))
                        {
                            item.Kill();
                        }
                    }
                    catch { }

                    File.Move(path, path + QUARANTINE_EXTENSION);
                }
                catch (Exception ex)
                {
                    Debug.WriteLine(ex.ToString());
                }
            }
        }

        public async Task PrepareExit()
        {
            await hashDatabase.SaveDatabase();
        }
    }
}
