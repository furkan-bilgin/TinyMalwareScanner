
using System.Diagnostics;
using System.Management;
using System.Text.RegularExpressions;

namespace TinyMalwareScanner
{
    public delegate void ProcessStartEvent(string path, Process process);
    public class ProcessMonitor
    {
        public ProcessStartEvent? ProcessStartEvent;

        public void StartMonitoring()
        {
            var startWatch = new ManagementEventWatcher(@"\\.\root\CIMV2", "SELECT * FROM __InstanceCreationEvent WITHIN 1 WHERE TargetInstance ISA 'Win32_Process'");
            startWatch.EventArrived += new EventArrivedEventHandler(startWatch_EventArrived);
            startWatch.Start();

            /*
            var stopWatch = new ManagementEventWatcher(new WqlEventQuery("SELECT * FROM Win32_ProcessStopTrace"));
            stopWatch.EventArrived += new EventArrivedEventHandler(stopWatch_EventArrived);
            stopWatch.Start();*/
        }

        private void startWatch_EventArrived(object sender, EventArrivedEventArgs e)
        {
            try
            {
                var targetInstance = (System.Management.ManagementBaseObject)e.NewEvent.Properties["TargetInstance"].Value;
                var processId = targetInstance.Properties["ProcessId"].Value.ToString();
                if (processId == null)
                {
                    return;
                }

                Process process;
                try
                {
                    process = Process.GetProcessById(int.Parse(processId));
                }
                catch (ArgumentException)
                {
                    return;
                }

                if (process.MainModule != null)
                {
                    var path = process.MainModule.FileName;
                    if (path != null)
                    {
                        ProcessStartEvent?.Invoke(path, process);
                    }
                }

                Debug.WriteLine(">>" + GetCommandLine(process));
                var matches = Regex.Matches(GetCommandLine(process), @"([A-Z]:\\[^""\-/]*)");
                foreach (Match item in matches)
                {
                    if (File.Exists(item.Value))
                    {
                        ProcessStartEvent?.Invoke(item.Value, process);
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine(ex.ToString());
            }
        }

        private string GetCommandLine(Process process)
        {
            using var searcher = new ManagementObjectSearcher("SELECT CommandLine FROM Win32_Process WHERE ProcessId = " + process.Id);
            using var objects = searcher.Get();
            return objects.Cast<ManagementBaseObject>().SingleOrDefault()?["CommandLine"]?.ToString();
        }
    }
}
